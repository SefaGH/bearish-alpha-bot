name: PR CI (tests + sanity + failure feedback)

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: src
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -V
          pip install --upgrade pip setuptools wheel
          pip install --no-cache-dir -r requirements.txt
          pip install pytest

      - name: Syntax compile (src)
        id: compile
        continue-on-error: true
        run: |
          python - << 'PY'
          import compileall, sys
          ok = compileall.compile_dir("src", maxlevels=10, quiet=1)
          sys.exit(0 if ok else 1)
          PY

      - name: Import sanity
        id: imports
        continue-on-error: true
        run: |
          python - << 'PY'
          import importlib, sys
          mods = [
            "core.indicators",
            "core.sizing",
            "core.limits",
            "core.normalize",
            "strategies.oversold_bounce",
            "strategies.short_the_rip",
            "backtest.param_sweep",
            "backtest.param_sweep_str",
          ]
          try:
              for m in mods:
                  importlib.import_module(m)
              print("Import OK")
              sys.exit(0)
          except Exception as e:
              print("Import failed:", type(e).__name__, str(e)[:400])
              sys.exit(1)
          PY

      - name: Pytest
        id: pytest
        continue-on-error: true
        run: |
          set -o pipefail
          pytest -q | tee pytest.out

      - name: Upload CI artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pr-ci-artifacts
          path: |
            pytest.out
          if-no-files-found: ignore

      - name: Comment failure summary on PR
        if: ${{ steps.compile.outcome == 'failure' || steps.imports.outcome == 'failure' || steps.pytest.outcome == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const pr = context.payload.pull_request;
            const tail = (p, n=120) => {
              try { return fs.readFileSync(p, 'utf8').trim().split('\n').slice(-n).join('\n'); }
              catch { return '(no pytest.out log)'; }
            };
            const body = [
              '❌ CI failed. Quick summary:',
              '',
              `• compile outcome: ${'${{ steps.compile.outcome }}'}`,
              `• imports outcome: ${'${{ steps.imports.outcome }}'}`,
              `• pytest outcome : ${'${{ steps.pytest.outcome }}'}`,
              '',
              'Last lines from pytest:',
              '```',
              tail('pytest.out', 80),
              '```',
              '> Full logs available in Actions. Artifact: pr-ci-artifacts'
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body
            });

      - name: Add ci-failed label
        if: ${{ steps.compile.outcome == 'failure' || steps.imports.outcome == 'failure' || steps.pytest.outcome == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['ci-failed'],
            });

      - name: Telegram notify (optional)
        if: ${{ steps.compile.outcome == 'failure' || steps.imports.outcome == 'failure' || steps.pytest.outcome == 'failure' }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -n "${TELEGRAM_BOT_TOKEN}" ] && [ -n "${TELEGRAM_CHAT_ID}" ]; then
            MSG="❌ CI failed on PR #${{ github.event.pull_request.number }} (branch: ${{ github.event.pull_request.head.ref }}). Check Actions logs and artifact 'pr-ci-artifacts'."
            curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -H "Content-Type: application/json" \
              -d "{\"chat_id\":\"${TELEGRAM_CHAT_ID}\",\"text\":\"${MSG}\",\"parse_mode\":\"HTML\"}" || true
          else
            echo "Telegram secrets not set; skipping notify."
          fi

      - name: Fail job if any step failed
        if: ${{ steps.compile.outcome == 'failure' || steps.imports.outcome == 'failure' || steps.pytest.outcome == 'failure' }}
        run: |
          echo "One or more CI steps failed. Failing job."
          exit 1
