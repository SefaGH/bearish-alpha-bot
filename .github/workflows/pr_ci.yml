name: PR CI

on:
  pull_request:
    branches:
      - main

jobs:
  ci:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install dependencies
        run: |
          python -V
          pip install --upgrade pip setuptools wheel
          pip install --no-cache-dir -r requirements.txt
          pip install pytest
      
      - name: Compile all Python files
        id: compile
        continue-on-error: true
        run: |
          python -m compileall src/ > compile.log 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Import sanity checks
        id: imports
        continue-on-error: true
        run: |
          echo "Testing key module imports..." > import_sanity.log
          PYTHONPATH=src python -c "from backtest.param_sweep import main" >> import_sanity.log 2>&1
          PYTHONPATH=src python -c "from backtest.param_sweep_str import main" >> import_sanity.log 2>&1
          PYTHONPATH=src python -c "from main import run_once" >> import_sanity.log 2>&1
          PYTHONPATH=src python -c "from universe import pick_execution_exchange" >> import_sanity.log 2>&1
          PYTHONPATH=src python -c "from core.exec_engine import ExecEngine" >> import_sanity.log 2>&1
          PYTHONPATH=src python -c "from core.trailing import initial_stops" >> import_sanity.log 2>&1
          PYTHONPATH=src python -c "from core.sizing import position_size_usdt" >> import_sanity.log 2>&1
          PYTHONPATH=src python -c "from core.limits import clamp_amount, meets_or_scale_notional" >> import_sanity.log 2>&1
          PYTHONPATH=src python -c "from core.normalize import amount_to_precision" >> import_sanity.log 2>&1
          echo "All imports successful!" >> import_sanity.log
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Run pytest
        id: pytest
        continue-on-error: true
        run: |
          python -m pytest tests/ -v > pytest.log 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Upload logs on failure
        if: steps.compile.outputs.exit_code != '0' || steps.imports.outputs.exit_code != '0' || steps.pytest.outputs.exit_code != '0'
        uses: actions/upload-artifact@v4
        with:
          name: ci-failure-logs
          path: |
            compile.log
            import_sanity.log
            pytest.log
          if-no-files-found: ignore
      
      - name: Label PR on failure
        if: steps.compile.outputs.exit_code != '0' || steps.imports.outputs.exit_code != '0' || steps.pytest.outputs.exit_code != '0'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['ci-failed']
            });
      
      - name: Comment failure summary
        if: steps.compile.outputs.exit_code != '0' || steps.imports.outputs.exit_code != '0' || steps.pytest.outputs.exit_code != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = '## ‚ùå CI Failed\n\n';
            
            if ('${{ steps.compile.outputs.exit_code }}' !== '0') {
              summary += '### Compilation Errors\n```\n';
              try {
                const log = fs.readFileSync('compile.log', 'utf8');
                summary += log.split('\n').slice(-20).join('\n');
              } catch (e) {
                summary += 'Could not read compile.log';
              }
              summary += '\n```\n\n';
            }
            
            if ('${{ steps.imports.outputs.exit_code }}' !== '0') {
              summary += '### Import Errors\n```\n';
              try {
                const log = fs.readFileSync('import_sanity.log', 'utf8');
                summary += log.split('\n').slice(-20).join('\n');
              } catch (e) {
                summary += 'Could not read import_sanity.log';
              }
              summary += '\n```\n\n';
            }
            
            if ('${{ steps.pytest.outputs.exit_code }}' !== '0') {
              summary += '### Test Failures\n```\n';
              try {
                const log = fs.readFileSync('pytest.log', 'utf8');
                summary += log.split('\n').slice(-30).join('\n');
              } catch (e) {
                summary += 'Could not read pytest.log';
              }
              summary += '\n```\n\n';
            }
            
            summary += '\nFull logs are available in the workflow artifacts.';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
      
      - name: Telegram notification on failure
        if: (steps.compile.outputs.exit_code != '0' || steps.imports.outputs.exit_code != '0' || steps.pytest.outputs.exit_code != '0') && secrets.TELEGRAM_BOT_TOKEN != ''
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="üõë PR CI Failed: ${{ github.event.pull_request.html_url }}" \
            -d parse_mode="HTML" || true
      
      - name: Fail job if any step failed
        if: steps.compile.outputs.exit_code != '0' || steps.imports.outputs.exit_code != '0' || steps.pytest.outputs.exit_code != '0'
        run: exit 1
