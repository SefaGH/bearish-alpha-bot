name: Run Bot with Pipeline

on:
  workflow_dispatch:  # SADECE manuel tetikleme
    inputs:
      duration:
        description: 'Run duration in minutes (0 for continuous)'
        required: false
        default: '30'
        type: string
  # schedule KAPALI - otomatik çalışmayı istemiyoruz
  # schedule:
  #   - cron: "*/15 * * * *"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 35  # Max 35 dakika
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install deps
        run: |
          python -V
          pip install --upgrade pip setuptools wheel
          # Fix for parse_frame error - install specific versions first
          pip install --no-cache-dir aiohttp==3.8.6 yarl<2.0 multidict<7.0
          pip install --no-cache-dir -r requirements.txt
      
      - name: Run bot with pipeline
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          EXCHANGES: ${{ secrets.EXCHANGES }}
          EXECUTION_EXCHANGE: ${{ secrets.EXECUTION_EXCHANGE }}
          MODE: ${{ secrets.MODE || 'paper' }}
          BINGX_KEY: ${{ secrets.BINGX_KEY }}
          BINGX_SECRET: ${{ secrets.BINGX_SECRET }}
          BINANCE_KEY: ${{ secrets.BINANCE_KEY }}
          BINANCE_SECRET: ${{ secrets.BINANCE_SECRET }}
          KUCOIN_KEY: ${{ secrets.KUCOIN_KEY }}
          KUCOIN_SECRET: ${{ secrets.KUCOIN_SECRET }}
          KUCOIN_PASSPHRASE: ${{ secrets.KUCOIN_PASSPHRASE }}
          OKX_KEY: ${{ secrets.OKX_KEY }}
          OKX_SECRET: ${{ secrets.OKX_SECRET }}
          OKX_PASSPHRASE: ${{ secrets.OKX_PASSPHRASE }}
          BYBIT_KEY: ${{ secrets.BYBIT_KEY }}
          BYBIT_SECRET: ${{ secrets.BYBIT_SECRET }}
          PIPELINE_DURATION_MINUTES: ${{ github.event.inputs.duration }}
        run: |
          # Duration parametresine göre çalıştır
          duration_minutes="${PIPELINE_DURATION_MINUTES:-30}"
          
          if [ "$duration_minutes" = "0" ]; then
            echo "Running in continuous mode (until timeout)..."
            python src/main.py --pipeline
          else
            duration_seconds=$((duration_minutes * 60))
            echo "Running for $duration_minutes minutes ($duration_seconds seconds)..."
            timeout $duration_seconds python src/main.py --pipeline || true
          fi
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-logs-${{ github.run_id }}
          path: |
            logs/
            data/
            *.log
